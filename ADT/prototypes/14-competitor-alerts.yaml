# Proposed ADT based on the previous Inycom ADT,
# with added functionality of observing a queue
# to meet a deadline and watching CPU consumption

tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/D5.5/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    competitor-alerts:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: INSERT_DOCKER_IMAGE_HERE
        resources:
          requests:
            cpu: "800m"
        ports:
        - target: 8080
          nodePort: 30808
          type: NodePort
      requirements:
      - host: worker-node

    worker-node:
      type: tosca.nodes.MiCADO.CloudSigma.Compute
      properties:
        num_cpus: 2600
        mem_size: 4294967296
        vnc_password: xx
        libdrive_id: xx
        public_key_id: xx
        nics:
        - firewall_policy: xx
          ip_v4_conf:
            conf: dhcp
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: cloudsigma
              endpoint_cloud: https://xx/api/
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 4 GB

  policies:    
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: false
          enable_node_metrics: true
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker-node ]
        properties:
          priority: 20
          sources:
          - 'competitor-alerts-queue-exporter:9102'
          constants:
            MAXNODES: 100
          queries:
            DEADLINE: "current_deadline"
            ITEMS: "count(current_queued_jobs)"
            COMPLETED: "count(queued_jobs_completed == 1)"
            AET: "AVG(queued_job_completion_time)"
          min_instances: "0"
          max_instances: "{{MAXNODES}}"
          scaling_rule: |
            if DEADLINE:
              REMAININGTIME = DEADLINE - time()
              reqnodes = ceil(AET/((REMAININGTIME-AET)/ITEMS))
              if reqnodes<=0 or reqnodes>ITEMS:
                reqnodes = ITEMS
              if reqnodes>m_node_count:
                m_node_count = reqnodes
              elif reqnodes<m_node_count-1 and REMAININGTIME>AET*2 and m_time_since_node_count_changed>60:
                m_node_count-=1
            else:
              print("Let consumption policy decide")
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU
        targets: [ worker-node ]
        properties:
          priority: 10
          constants:
            NODE_NAME: 'worker-node'
            NODE_TH_MAX: '80'
            NODE_TH_MIN: '50'
          min_instances: 1
          max_instances: "{{MAXNODES}}"

policy_types:
  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: '(100-(avg(rate(node_cpu{node="{{ NODE_NAME }}", mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: '(100-(avg(rate(node_cpu{node="{{ NODE_NAME }}", mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
          for: 2m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count:
            if node_overloaded and service_working:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
