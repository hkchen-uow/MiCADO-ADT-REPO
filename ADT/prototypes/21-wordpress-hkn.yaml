# Proposed ADT based on the existing Outlandish ADT for WordPress deployments
# Could also use test WordPress application included with MiCADO
# Uses Nova compute nodes for HKN

tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/D5.5/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: NGINX_HOST
            value: "xx"
          - name: NGINX_PORT
            value: "8080"
          - name: FPM_HOST
            value: "xx"
          - name: FPM_PORT
            value: "9000"
        ports:
          - target: 8080
            type: NodePort
            nodePort: 32349
          - target: 9432
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: outlandish/bedrock-web
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    wordpress:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: DB_HOST
            value: "db"
          - name: DB_NAME
            value: "xx"
          - name: DB_USER
            value: "xx"
          - name: DB_PASSWORD
            value: "xx"
          - name: WP_HOME
            value: "xx"
        ports:
          - target: 9000
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: outlandish/bedrock
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    db:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: "xx"
          - name: MYSQL_USER
            value: "xx"
          - name: MYSQL_PASSWORD
            value: "xx"
          - name: MYSQL_DATABASE
            value: "xx"
        ports:
          - target: 3306
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: mysql:5.7
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    worker-node: 
      type: tosca.nodes.MiCADO.Nova.Compute
      properties:
        image_id: xx
        flavor_name: xx
        project_id: xx
        network_id: xx
        key_name: xx-public-key
        security_groups:
          - xx
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: nova
              endpoint_cloud: https://xx.cloud:5000/v3/
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ nginxapp, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU
        targets: [ worker-node ]
        properties:
          constants:
            NODE_TH_MAX: '66'
            NODE_TH_MIN: '33'
          min_instances: 1
          max_instances: 10

    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU
        targets: [ wordpress ]
        properties:
          constants:
            SERVICE_FULL_NAME: 'wordpress'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 10

policy_types:

  tosca.policies.Scaling.MiCADO.Container.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
          - alert: wordpress_overloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
            for: 30s
          - alert: wordpress_underloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
            for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU for WordPress/PHP service
        default: |
          if len(m_nodes) == m_node_count:
            if wordpress_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if wordpress_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
          - alert: node_overloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
            for: 1m
          - alert: node_underloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
            for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
